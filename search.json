[{"title":"网站建设日志","url":"/website-construction/Website-construction-log/","content":"<h4 id=\"2021-3-2\"><a href=\"#2021-3-2\" class=\"headerlink\" title=\"2021/3/2\"></a>2021/3/2</h4><p>使用Hexo+GitHubPages初步构建网站  </p>\n<h4 id=\"2021-3-3\"><a href=\"#2021-3-3\" class=\"headerlink\" title=\"2021/3/3\"></a>2021/3/3</h4><p>替换网站域名为个人域名<br>增加网站图标<br>增加标签 分类 归档<br>增加评论功能  </p>\n<h4 id=\"2021-3-4\"><a href=\"#2021-3-4\" class=\"headerlink\" title=\"2021/3/4\"></a>2021/3/4</h4><p>添加访客统计</p>\n<h4 id=\"2021-3-5\"><a href=\"#2021-3-5\" class=\"headerlink\" title=\"2021/3/5\"></a>2021/3/5</h4><p>增加暗色模式<br>更换Hexo的markdown渲染引擎为hexo-renderer-kramed，解决latex公式无法渲染的问题 <a href=\"https://www.jianshu.com/p/d95a4795f3a8\">hexo下LaTeX无法显示的解决方案</a><br><a href=\"https://blog.csdn.net/Awt_FuDongLai/article/details/107466848\">增加代码块一键复制功能</a></p>\n","categories":["website-construction"],"tags":["log"]},{"title":"test","url":"/test/test/","content":"<h1 id=\"测试页面\"><a href=\"#测试页面\" class=\"headerlink\" title=\"测试页面\"></a>测试页面</h1><h1 id=\"Markdown-syntax-guide\"><a href=\"#Markdown-syntax-guide\" class=\"headerlink\" title=\"Markdown syntax guide\"></a>Markdown syntax guide</h1><h2 id=\"Headers\"><a href=\"#Headers\" class=\"headerlink\" title=\"Headers\"></a>Headers</h2><h1 id=\"This-is-a-Heading-h1\"><a href=\"#This-is-a-Heading-h1\" class=\"headerlink\" title=\"This is a Heading h1\"></a>This is a Heading h1</h1><h2 id=\"This-is-a-Heading-h2\"><a href=\"#This-is-a-Heading-h2\" class=\"headerlink\" title=\"This is a Heading h2\"></a>This is a Heading h2</h2><h6 id=\"This-is-a-Heading-h6\"><a href=\"#This-is-a-Heading-h6\" class=\"headerlink\" title=\"This is a Heading h6\"></a>This is a Heading h6</h6><h2 id=\"Emphasis\"><a href=\"#Emphasis\" class=\"headerlink\" title=\"Emphasis\"></a>Emphasis</h2><p><em>This text will be italic</em><br>_This will also be italic_</p>\n<p><strong>This text will be bold</strong><br><strong>This will also be bold</strong></p>\n<p>_You <strong>can</strong> combine them_</p>\n<h2 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h2><h3 id=\"Unordered\"><a href=\"#Unordered\" class=\"headerlink\" title=\"Unordered\"></a>Unordered</h3><ul>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 2a</li>\n<li>Item 2b</li>\n</ul>\n<h3 id=\"Ordered\"><a href=\"#Ordered\" class=\"headerlink\" title=\"Ordered\"></a>Ordered</h3><ol>\n<li>Item 1</li>\n<li>Item 2</li>\n<li>Item 3<ol>\n<li>Item 3a</li>\n<li>Item 3b</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"Images\"><a href=\"#Images\" class=\"headerlink\" title=\"Images\"></a>Images</h2><p><img src=\"/image/sample.png\" alt=\"This is a alt text.\" title=\"This is a sample image.\"></p>\n<h2 id=\"Links\"><a href=\"#Links\" class=\"headerlink\" title=\"Links\"></a>Links</h2><p>You may be using <a href=\"https://markdownlivepreview.com/\">Markdown Live Preview</a>.</p>\n<h2 id=\"Blockquotes\"><a href=\"#Blockquotes\" class=\"headerlink\" title=\"Blockquotes\"></a>Blockquotes</h2><blockquote>\n<p>Markdown is a lightweight markup language with plain-text-formatting syntax, created in 2004 by John Gruber with Aaron Swartz.</p>\n<blockquote>\n<p>Markdown is often used to format readme files, for writing messages in online discussion forums, and to create rich text using a plain text editor.</p>\n</blockquote>\n</blockquote>\n<h2 id=\"Tables\"><a href=\"#Tables\" class=\"headerlink\" title=\"Tables\"></a>Tables</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>Left columns</th>\n<th style=\"text-align:center\">Right columns</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>left foo</td>\n<td style=\"text-align:center\">right foo</td>\n</tr>\n<tr>\n<td>left bar</td>\n<td style=\"text-align:center\">right bar</td>\n</tr>\n<tr>\n<td>left baz</td>\n<td style=\"text-align:center\">right baz</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"Blocks-of-code\"><a href=\"#Blocks-of-code\" class=\"headerlink\" title=\"Blocks of code\"></a>Blocks of code</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">let message &#x3D; &#39;Hello world&#39;;</span><br><span class=\"line\">alert(message);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Inline-code\"><a href=\"#Inline-code\" class=\"headerlink\" title=\"Inline code\"></a>Inline code</h2><p>This web site is using <code>markedjs/marked</code>.  </p>\n<p>$ L(Y,f(X))=(Y-f(X))^2 $</p>\n","categories":["test"],"tags":["test"]},{"title":"基于特征提取的图像拼接","url":"/project/feature-extraction-based-image-stiching/","content":"<h2 id=\"整体思路\"><a href=\"#整体思路\" class=\"headerlink\" title=\"整体思路\"></a>整体思路</h2><p>效果图如下：<br>输入每张重叠超过50%的图片<br><img src=\"https://i.loli.net/2021/03/05/xgNFt3W2XdyozIi.png\" alt=\"输入图片.png\"><br>输出拼接后的图片<br><img src=\"https://i.loli.net/2021/03/05/oA3pb8Qe2RlwJUK.png\" alt=\"输出图片.png\">  </p>\n<hr>\n<p>首先，对于输入图片，获取图片的数量，宽，高等信息；其次，使用角点检测算法对图像提取特征点；在排除异常特征点后求解变换矩阵；最后进行图像融合并输出。以下是整个图像拼接的流程图：<br><img src=\"https://i.loli.net/2021/03/05/Dx274iNCLKbPBGY.png\" alt=\"流程图.png\">   </p>\n<h3 id=\"FAST算法提取特征点\"><a href=\"#FAST算法提取特征点\" class=\"headerlink\" title=\"FAST算法提取特征点\"></a>FAST算法提取特征点</h3><p>FAST的提出者Rosten等将FAST角点定义为：若某像素与其周围邻域内足够多的像素点相差较大，则该像素可能是角点。</p>\n<p>核心思想如下：该算法的基本原理是使用圆周长为16个像素点来判定其圆心像素P是否为角点。如下图所示，在圆周上按顺时针方向从1到16的顺序对圆周像素点进行编号。如果在圆周上有N个连续的像素的亮度都比圆心像素的亮度Ip加上阈值t还要亮，或者比圆心像素的亮度减去阈值还要暗，则圆心像素被称为角点。<br><img src=\"https://i.loli.net/2021/03/05/wRe6TDOFVNQtqkg.png\" alt=\"圆周上的16个像素.png\">  </p>\n<hr>\n<p>详细计算方法如下：</p>\n<ul>\n<li>选择某个像素p其像素值为$I_p$以p为圆心，半径为三个像素确定一个圆，圆上有$16$个像素点记作$p_1,p_2,p_3…p_{16}$ </li>\n<li>确定一个阈值记作$t$  </li>\n<li>让圆上的$n$个连续的像素的像素值与$p$的像素值做差，若这些差值的绝对值都比$I_\\sigma+t$或者都比$I_\\sigma-t$小,则像素为角点。令$n=12$  </li>\n<li>分别计算$p_1,p_2,p_3,p_4$四个点像素值与$I_\\sigma$的差值，若差值的绝对值都比$I_\\sigma+t$大或都比$I_\\sigma-t$小，则进入下一步判断，否则 点被丢弃。  </li>\n<li>对圆上16个像素点的像素值分别与$I_\\sigma$做差，若有n个像素点的差值的绝对值都比$I_\\sigma+t$大或都比$I_\\sigma-t$小，则$p$点为角点。</li>\n</ul>\n<h3 id=\"计算特征点的特征向量\"><a href=\"#计算特征点的特征向量\" class=\"headerlink\" title=\"计算特征点的特征向量\"></a>计算特征点的特征向量</h3><p>在获取到特征点后下一步就需要判断特征点的方向即特征点的向量，为下一步匹配特征点做准备。详细的计算方法如下：  </p>\n<ul>\n<li>将关键点周围的像素旋转到一个统一的方向，以保证方向不变性。</li>\n<li>将这些像素分成$4×4$的小块。</li>\n<li>对每个格子进行分析，将格子中的像素计算梯度，映射到8个方向上，对于每一个格子，可以得到一个8维的向量，对于一个关键点周围16个格子，则得到了16×8=128维的向量，构成一个关键点特征向量<br><img src=\"https://i.loli.net/2021/03/05/Cdbqy1iLWJgrcwZ.jpg\" alt=\"量化.jpg\"><br><img src=\"https://i.loli.net/2021/03/05/pCjIUhadzNPMOQ9.jpg\" alt=\"计算特征向量.jpg\"></li>\n</ul>\n<h3 id=\"排除异常特征点，求解变换矩阵\"><a href=\"#排除异常特征点，求解变换矩阵\" class=\"headerlink\" title=\"排除异常特征点，求解变换矩阵\"></a>排除异常特征点，求解变换矩阵</h3><p>使用RANSAC算法排除异常特征点并返回仿射变换矩阵。其中RANSAC算法寻找最佳单位应性矩阵3*3H，算法目的是找到最优的参数矩阵使得该矩阵的数据点个数最多，单位性矩阵有8个未知参数，需要4组配对点。解出方程后对所有的样本进行测试，找到代价函数最小的模型。</p>\n<p>RANSAC实现过程：</p>\n<ul>\n<li>随机从数据集中抽取8个样本数据，计算出变换矩阵H，记为模型M。</li>\n<li>计算数据集中所有数据与模型M的投影误差，若小于阈值，加入内点集I。</li>\n<li>当内点集I的元素个数大于最优内点集，则更新最优内点集，同时更新迭代次数。</li>\n<li>如果迭代次数大于k，则退出，否则迭代次数加1，并重复上述步骤。</li>\n</ul>\n<h3 id=\"图像融合\"><a href=\"#图像融合\" class=\"headerlink\" title=\"图像融合\"></a>图像融合</h3><p>使用渐入渐出的方法对图片进行融合。具体过程如下：</p>\n<ul>\n<li>对基准图和待拼接图分别乘以加权系数，加权系数的大小反比于各自图象的距离。但由于两张图片有黑边的存在，在拼接的过程中原始图像被乘上了小于1的系数，使得亮度下降，导致在黑边位置处有较明显的拼接缝。<br>渐入渐出公式：<script type=\"math/tex; mode=display\">\nf(x,y) = \\begin{cases}\nf_1(x,y) & (x,y)\\in f_1 \\\\\nd_1f_1(x,y)+d_2f_2(x,y) & (x,y)\\in f_1\\cap f_2 \\\\\nf_2(x,y) & (x,y)\\in f_2\\\\\n\\end{cases}</script></li>\n<li>对拼接缝再次处理，拼接缝存在的原因是在一张图的黑边处另一张图的亮度被加权系数所减小，因此需要对边框处的图象进行处理。  首先提取出两张图像的非重叠部分，构建一个类似于hat函数的矩阵，通过该矩阵乘上非重叠部分，按比例增加它们的亮度，最后和之前的图像相互叠加。这样就能和之前被减小的亮度互相抵消，达到的消除拼接缝的目的。  </li>\n</ul>\n<h2 id=\"实现过程\"><a href=\"#实现过程\" class=\"headerlink\" title=\"实现过程\"></a>实现过程</h2><h3 id=\"输入图片，提取图片信息\"><a href=\"#输入图片，提取图片信息\" class=\"headerlink\" title=\"输入图片，提取图片信息\"></a>输入图片，提取图片信息</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">file = fullfile(<span class=\"string\">&#x27;图片路径&#x27;</span>); </span><br><span class=\"line\">image_file = imageDatastore(file);</span><br><span class=\"line\">N= <span class=\"built_in\">numel</span>(image_file.Files); <span class=\"comment\">% N为图片数量</span></span><br><span class=\"line\"><span class=\"comment\">% montage(image_file.Files); %显示图片</span></span><br><span class=\"line\">Image1 = readimage(image_file, <span class=\"number\">1</span>);</span><br><span class=\"line\">ImageSize=<span class=\"built_in\">size</span>(Image1); <span class=\"comment\">% 确定图片大小</span></span><br></pre></td></tr></table></figure>\n<p>输入图片：<br><img src=\"https://i.loli.net/2021/03/05/hrbB123QZcLd9jI.png\" alt=\"输入图片.png\"></p>\n<h3 id=\"特征点提取与匹配\"><a href=\"#特征点提取与匹配\" class=\"headerlink\" title=\"特征点提取与匹配\"></a>特征点提取与匹配</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">[matchedPoints1, matchedPoints2]</span> = <span class=\"title\">Feature_extraction</span><span class=\"params\">(Image1,Image2)</span></span></span><br><span class=\"line\">Gray_Image1= rgb2gray(Image1); <span class=\"comment\">%；转化为灰度图</span></span><br><span class=\"line\">Gray_Image2= rgb2gray(Image2);</span><br><span class=\"line\"><span class=\"comment\">%特征检测</span></span><br><span class=\"line\">points1=detectFASTFeatures(Gray_Image1); <span class=\"comment\">% 特征点 Harris or SURF or FAST </span></span><br><span class=\"line\">points2=detectFASTFeatures(Gray_Image2); </span><br><span class=\"line\"><span class=\"comment\">% 特征向量</span></span><br><span class=\"line\">[features1, valid_points1] = extractFeatures(Gray_Image1,points1); </span><br><span class=\"line\">[features2, valid_points2] = extractFeatures(Gray_Image2,points2); </span><br><span class=\"line\"><span class=\"comment\">%特征匹配</span></span><br><span class=\"line\">indexPairs = matchFeatures(features1,features2, <span class=\"string\">&#x27;Unique&#x27;</span>, <span class=\"built_in\">true</span>); <span class=\"comment\">%寻找对应点 </span></span><br><span class=\"line\">matchedPoints1 = valid_points1(indexPairs(:,<span class=\"number\">1</span>));</span><br><span class=\"line\">matchedPoints2 = valid_points2(indexPairs(:,<span class=\"number\">2</span>));</span><br><span class=\"line\">showMatchedFeatures(Image1,Image2,...</span><br><span class=\"line\">   matchedPoints1,matchedPoints2,<span class=\"string\">&#x27;montage&#x27;</span>);title(<span class=\"string\">&#x27;粗匹配的特征点&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>粗匹配图像：<br><img src=\"https://i.loli.net/2021/03/05/J8KXhlM1uEsIvoe.png\" alt=\"粗匹配的特征点.png\"></p>\n<h3 id=\"排除异常特征点，求解变换矩阵-1\"><a href=\"#排除异常特征点，求解变换矩阵-1\" class=\"headerlink\" title=\"排除异常特征点，求解变换矩阵\"></a>排除异常特征点，求解变换矩阵</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">[tform,Filtered_matchedPoints2,Filtered_matchedPoints1] = ...</span><br><span class=\"line\">    estimateGeometricTransform(matchedPoints2,matchedPoints1,<span class=\"string\">&#x27;projective&#x27;</span>,<span class=\"string\">&#x27;Confidence&#x27;</span>, <span class=\"number\">99.9</span>);  </span><br><span class=\"line\">showMatchedFeatures(Image1,Image2,...</span><br><span class=\"line\">\tFiltered_matchedPoints1,Filtered_matchedPoints2,<span class=\"string\">&#x27;montage&#x27;</span>);title(<span class=\"string\">&#x27;RANSAC精匹配的特征点&#x27;</span>);</span><br></pre></td></tr></table></figure>\n<p>排除异常特征点后的图像如下：<br><img src=\"https://i.loli.net/2021/03/05/wHfNhYOr8QjptW4.png\" alt=\"精匹配的特征点.png\"></p>\n<h3 id=\"图像融合-1\"><a href=\"#图像融合-1\" class=\"headerlink\" title=\"图像融合\"></a>图像融合</h3><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">[panorama] = Image_fusion(Image1,Image2,tform,ans_to_LR);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">[Image,row]</span> = <span class=\"title\">Image_fusion</span><span class=\"params\">(Rgb_Image1,Rgb_Image2,tform,ans_to_LR)</span></span></span><br><span class=\"line\">row=<span class=\"number\">0</span>; <span class=\"comment\">%赋初值</span></span><br><span class=\"line\">Gray_Image2=rgb2gray(Rgb_Image2); </span><br><span class=\"line\">ImageSize=<span class=\"built_in\">size</span>(Gray_Image2); <span class=\"comment\">% 读取图片大小</span></span><br><span class=\"line\">[xlim, ylim] = outputLimits(tform, [<span class=\"number\">1</span> ImageSize(<span class=\"number\">2</span>)], [<span class=\"number\">1</span> ImageSize(<span class=\"number\">1</span>)]); <span class=\"comment\">% 查找几何变换的输出限制</span></span><br><span class=\"line\">xMin = <span class=\"built_in\">min</span>([<span class=\"number\">1</span>; xlim(:)]); <span class=\"comment\">% 返回(1，xlim)中的最小值</span></span><br><span class=\"line\">xMax = <span class=\"built_in\">max</span>([ImageSize(<span class=\"number\">2</span>); xlim(:)]); <span class=\"comment\">% 返回图像列数，xlim中的最大值</span></span><br><span class=\"line\">yMin = <span class=\"built_in\">min</span>([<span class=\"number\">1</span>; ylim(:)]); <span class=\"comment\">% 返回(1，ylim)中的最小值</span></span><br><span class=\"line\">yMax = <span class=\"built_in\">max</span>([ImageSize(<span class=\"number\">1</span>); ylim(:)]); <span class=\"comment\">% 返回图像(高度，ylim)中的最大值</span></span><br><span class=\"line\"><span class=\"comment\">% 确定全景图的宽高</span></span><br><span class=\"line\">width  = <span class=\"built_in\">round</span>(xMax - xMin); <span class=\"comment\">% round(X):将X的每个元素舍入到最接近的整数。</span></span><br><span class=\"line\">height = <span class=\"built_in\">round</span>(yMax - yMin);</span><br><span class=\"line\"><span class=\"comment\">%创建2D空间参考对象定义全景图尺寸</span></span><br><span class=\"line\">xLimits = [xMin xMax]; <span class=\"comment\">% 横向拼接</span></span><br><span class=\"line\">yLimits = [yMin yMax];</span><br><span class=\"line\">panoramaView = imref2d([ height width ], xLimits, yLimits);  <span class=\"comment\">% height,width: 图像大小。xLimits,yLimits:图象范围</span></span><br><span class=\"line\"><span class=\"comment\">% 变换图片到全景图.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (ans_to_LR==<span class=\"number\">1</span>)</span><br><span class=\"line\">    Image1 = imwarp(Rgb_Image1,projective2d(<span class=\"built_in\">eye</span>(<span class=\"number\">3</span>)), <span class=\"string\">&#x27;OutputView&#x27;</span>, panoramaView);</span><br><span class=\"line\">    Image2 = imwarp(Rgb_Image2, tform, <span class=\"string\">&#x27;OutputView&#x27;</span>, panoramaView); <span class=\"comment\">% 将几何变换运用到图象   </span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    Image2 = imwarp(Rgb_Image1,projective2d(<span class=\"built_in\">eye</span>(<span class=\"number\">3</span>)), <span class=\"string\">&#x27;OutputView&#x27;</span>, panoramaView);</span><br><span class=\"line\">    Image1 = imwarp(Rgb_Image2, tform, <span class=\"string\">&#x27;OutputView&#x27;</span>, panoramaView); <span class=\"comment\">% 将几何变换运用到图象 </span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">figure</span>;imshow(Image1);<span class=\"built_in\">figure</span>;imshow(Image2);</span><br></pre></td></tr></table></figure>\n<p>以上代码实现利用仿射变换矩阵，令一张图片作为基准图片，使另一张图片进行变换使得两张图片处在同一角度。变换后的图片如下：<br><img src=\"https://i.loli.net/2021/03/05/EuqTZijwPYFa9OK.png\" alt=\"基准图片和变换后的图片.png\"></p>\n<hr>\n<figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">%渐入渐出拼接图象</span></span><br><span class=\"line\"><span class=\"comment\">%第一次拼接</span></span><br><span class=\"line\">width2=<span class=\"built_in\">size</span>(Image1,<span class=\"number\">2</span>); <span class=\"comment\">%获取图像宽/矩阵列数</span></span><br><span class=\"line\">height2=<span class=\"built_in\">size</span>(Image1,<span class=\"number\">1</span>); </span><br><span class=\"line\"><span class=\"comment\">% Image1=im2double(Image1);Image2=im2double(Image2);</span></span><br><span class=\"line\">d1=<span class=\"number\">0</span>:<span class=\"number\">1</span>/(width2<span class=\"number\">-1</span>):<span class=\"number\">1</span>;</span><br><span class=\"line\">D1=<span class=\"built_in\">repmat</span>(d1,height2,<span class=\"number\">1</span>);</span><br><span class=\"line\">D2=<span class=\"built_in\">fliplr</span>(D1); <span class=\"comment\">%把D1倒序</span></span><br><span class=\"line\">Image1=im2double(Image1);Image2=im2double(Image2);</span><br><span class=\"line\">Image=(D2.*Image1+D1.*Image2); <span class=\"comment\">% D1 D2:加权系数</span></span><br><span class=\"line\"><span class=\"built_in\">figure</span>; imshow(Image);</span><br><span class=\"line\"><span class=\"comment\">%对边缘带再次处理并拼接</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">mod</span>(width2,<span class=\"number\">2</span>)==<span class=\"number\">1</span>) <span class=\"comment\">% 判断奇偶性</span></span><br><span class=\"line\">    Croped_D1=imcrop(D1,[<span class=\"number\">1</span>,<span class=\"number\">1</span>,((width2+<span class=\"number\">1</span>)/<span class=\"number\">2</span>)<span class=\"number\">-1</span>,height2<span class=\"number\">-1</span>]); <span class=\"comment\">% 把D1裁剪成hat函数左半边的形式</span></span><br><span class=\"line\">    <span class=\"comment\">%Croped_D2=fliplr(Croped_D1);  % 把D1取反变为hat函数右半边的形式</span></span><br><span class=\"line\">    Croped_D2=imcrop(D2,[((width2+<span class=\"number\">1</span>)/<span class=\"number\">2</span>)+<span class=\"number\">1</span>,<span class=\"number\">1</span>,(width2+<span class=\"number\">1</span>)<span class=\"number\">-2</span>,height2<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    D=[Croped_D1 Croped_D2];</span><br><span class=\"line\">    Image0=(<span class=\"built_in\">abs</span>(Image1-Image2))/<span class=\"number\">2</span>;</span><br><span class=\"line\">    Image0=<span class=\"number\">2</span>*D.*Image0;</span><br><span class=\"line\">    Image=Image+Image0;    </span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">    Croped_D1=imcrop(D1,[<span class=\"number\">1</span>,<span class=\"number\">1</span>,(width2/<span class=\"number\">2</span>)<span class=\"number\">-1</span>,height2<span class=\"number\">-1</span>]); <span class=\"comment\">%把D1裁剪成hat函数左半边</span></span><br><span class=\"line\">    Croped_D2=<span class=\"built_in\">fliplr</span>(Croped_D1);  <span class=\"comment\">% 把D1取反变为hat函数右半边的形式</span></span><br><span class=\"line\">    D=[Croped_D1 Croped_D2];</span><br><span class=\"line\">    Image0=(<span class=\"built_in\">abs</span>(Image1-Image2))/<span class=\"number\">2</span>;</span><br><span class=\"line\">    Image0=<span class=\"number\">2</span>*D.*Image0;</span><br><span class=\"line\">    Image=Image+Image0;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">figure</span>; imshow(Image);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure>\n<p>以上代码使用渐入渐出的方法对图片进行拼接，与直接进行拼接的方法进行对比如下：<br><img src=\"https://i.loli.net/2021/03/05/fupkJ1rd5qoR7AQ.png\" alt=\"直接拼接和渐入渐出拼接对比.png\"><br>可以看到直接拼接后的图片由于在重叠位置处像素值互相相加，导致亮度高于图片其他位置，而渐入渐出法拼接的图片由于在拼接前进行了赋权值，所以亮度变化比较平均。</p>\n<hr>\n<p>对其余图片进行同样的操作，可以得到拼接后的全景图：<br><img src=\"https://i.loli.net/2021/03/05/7whoAeExu9RLqFQ.png\" alt=\"拼接后的图片.png\"></p>\n<h3 id=\"去除图像黑边\"><a href=\"#去除图像黑边\" class=\"headerlink\" title=\"去除图像黑边\"></a>去除图像黑边</h3><p>可以看到拼接后的全景图有着较大的黑边，通过识别并裁剪去除图像黑边：<br><figure class=\"highlight matlab\"><table><tr><td class=\"code\"><pre><span class=\"line\">可以看到拼接后的全景图有着较大的黑边，通过识别并裁剪去除图像黑边：</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"params\">[panorama]</span> = <span class=\"title\">Remove_black_edges</span><span class=\"params\">(panorama,ImageSize,Odd_even)</span></span></span><br><span class=\"line\">ImageSize_panorama=<span class=\"built_in\">size</span>(panorama); <span class=\"comment\">% 获取全景图大小</span></span><br><span class=\"line\"><span class=\"comment\">%获取图基准图片黑框的宽，高</span></span><br><span class=\"line\"><span class=\"comment\">%ImageSize_Image1=size(Image1); % 获取基准图片大小</span></span><br><span class=\"line\">n=(ImageSize_panorama(<span class=\"number\">2</span>)); <span class=\"comment\">% 获取基准图片中间列的位置</span></span><br><span class=\"line\">n=n/<span class=\"number\">2</span>; </span><br><span class=\"line\"><span class=\"keyword\">if</span> (Odd_even==<span class=\"number\">0</span>)</span><br><span class=\"line\">    n=n/<span class=\"number\">2</span>; <span class=\"comment\">%图片为偶数个时获取图片1/4处的列</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">m=ImageSize_panorama(<span class=\"number\">1</span>); <span class=\"comment\">% m:行数</span></span><br><span class=\"line\">m=m/<span class=\"number\">2</span>;</span><br><span class=\"line\">n=<span class=\"built_in\">round</span>(n);m=<span class=\"built_in\">round</span>(m);</span><br><span class=\"line\"><span class=\"comment\">%Step 1 计算图象上下黑边的高</span></span><br><span class=\"line\">Gray_panorama=rgb2gray(panorama); <span class=\"comment\">% rgb图获取的矩阵第一行为三行</span></span><br><span class=\"line\">row=Gray_panorama(:,n); <span class=\"comment\">% 获取基准图片中间列（第n列）</span></span><br><span class=\"line\">row(m)=<span class=\"number\">1</span>; <span class=\"comment\">% 防止图片中间为全0，导致row=row(1)取不到数</span></span><br><span class=\"line\">[row] = <span class=\"built_in\">find</span>(row);  <span class=\"comment\">% [row,col,v] = find(Image1); 行坐标，列坐标，值。 find: 查找非0元素</span></span><br><span class=\"line\">row=row(<span class=\"number\">1</span>); <span class=\"comment\">% 第一个非0元素所在的行，也就是基准图片所在的行数</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (row==m)</span><br><span class=\"line\">    row=<span class=\"number\">0</span>; <span class=\"comment\">% 出现全0情况，把row(m/2)=1增加的数剔除</span></span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\"><span class=\"keyword\">end</span>    </span><br><span class=\"line\">panorama=imcrop(panorama,[<span class=\"number\">1</span>,row+<span class=\"number\">1</span>,ImageSize_panorama(<span class=\"number\">2</span>)<span class=\"number\">-1</span>,ImageSize(<span class=\"number\">1</span>)]);</span><br><span class=\"line\"><span class=\"comment\">%panorama=imcrop(panorama,[col_left,row+1,col_right-1,ImageSize(1)]);</span></span><br><span class=\"line\"><span class=\"comment\">%Step 2 计算图象左侧黑边的长度</span></span><br><span class=\"line\"><span class=\"comment\">%获取图基准图片黑框的宽，高</span></span><br><span class=\"line\">ImageSize_panorama=<span class=\"built_in\">size</span>(panorama);</span><br><span class=\"line\">n=(ImageSize_panorama(<span class=\"number\">2</span>)); <span class=\"comment\">% 获取基准图片中间列的位置</span></span><br><span class=\"line\">n=n/<span class=\"number\">2</span>; </span><br><span class=\"line\">m=ImageSize_panorama(<span class=\"number\">1</span>); <span class=\"comment\">% m:行数</span></span><br><span class=\"line\">m=m/<span class=\"number\">2</span>;</span><br><span class=\"line\">n=<span class=\"built_in\">round</span>(n);m=<span class=\"built_in\">round</span>(m);</span><br><span class=\"line\">Gray_panorama=rgb2gray(panorama); <span class=\"comment\">% rgb图获取的矩阵第一行为三行</span></span><br><span class=\"line\">col_1=Gray_panorama(<span class=\"number\">1</span>,:);</span><br><span class=\"line\">col_2=Gray_panorama(m,:); <span class=\"comment\">% 读取图片第一行和最后一行</span></span><br><span class=\"line\">[col_1]=<span class=\"built_in\">find</span>(col_1);</span><br><span class=\"line\">[col_2]=<span class=\"built_in\">find</span>(col_2); <span class=\"comment\">% 给出图片第一行和最后一行的所有非0值的位置</span></span><br><span class=\"line\">col_11=col_1(<span class=\"number\">1</span>);</span><br><span class=\"line\">col_12=col_2(<span class=\"number\">1</span>); <span class=\"comment\">% 给出图片第一行和最后一行的第一个非0值的位置，即图片左侧黑边可能的位置</span></span><br><span class=\"line\">col_left=<span class=\"built_in\">max</span>(col_11,col_12);<span class=\"comment\">% 给出图片左侧需截取的宽度</span></span><br><span class=\"line\"><span class=\"comment\">%Step 3 计算图象右侧黑边的长度</span></span><br><span class=\"line\">[col_1]=<span class=\"built_in\">fliplr</span>(col_1);</span><br><span class=\"line\">[col_2]=<span class=\"built_in\">fliplr</span>(col_2); <span class=\"comment\">% 左右翻转，方便提取右侧非0元素位置</span></span><br><span class=\"line\">col_21=col_1(<span class=\"number\">1</span>);</span><br><span class=\"line\">col_22=col_2(<span class=\"number\">1</span>); <span class=\"comment\">% 给出图片第一行和最后一行的右侧最后一个非0值的位置，即图片右侧黑边可能的位置</span></span><br><span class=\"line\">col_right=<span class=\"built_in\">min</span>(col_21,col_22); <span class=\"comment\">% 给出图片右侧黑边坐标（而不是宽度）</span></span><br><span class=\"line\">panorama=imcrop(panorama,[col_left,<span class=\"number\">1</span>,col_right-col_left<span class=\"number\">-1</span>,ImageSize_panorama(<span class=\"number\">1</span>)<span class=\"number\">-1</span>]);</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br></pre></td></tr></table></figure><br>去除黑边后的图像如下图：<br><img src=\"https://i.loli.net/2021/03/05/FI1bZiQJO4pSekE.png\" alt=\"去除黑边后的全景图.png\">  </p>\n<h2 id=\"工程源码\"><a href=\"#工程源码\" class=\"headerlink\" title=\"工程源码\"></a>工程源码</h2><p>图片融合： <a href=\"https://github.com/zxylab/Image_Stitching\">GitHub</a></p>\n","categories":["project"],"tags":["image-processing"]}]